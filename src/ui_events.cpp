// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.4.1
// LVGL version: 8.3.11
// Project name: SmartWatch

#include "ui.h"
#include "ui_roundmsgbox.h"
#include <Arduino.h>




void mainarc_valuechange(lv_event_t * e)
{
	// Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcMenu);

    // Define the total angle the arc covers
    int total_angle = 300;
    
    // Calculate the angle for each section (5 sections)
    int section_angle = total_angle / 5;

    // Define variables for the start and end angles of the indicator
    int indicator_start_angle;
    int indicator_end_angle;

	   // Variable to hold the text for the label
    const char *label_text;

//

  // Determine the indicator position based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section
        indicator_start_angle = 120;
        indicator_end_angle = 120 + section_angle;
        label_text = "Main";

    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section
        indicator_start_angle = 120 + section_angle;
        indicator_end_angle = 120 + 2 * section_angle;
        label_text = "Clock";

    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section
        indicator_start_angle = 120 + 2 * section_angle;
        indicator_end_angle = 120 + 3 * section_angle;
        label_text = "Music Controls";

    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section
        indicator_start_angle = 120 + 3 * section_angle;
        indicator_end_angle = 120 + 4 * section_angle;
        label_text = "Settings";

    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section
        indicator_start_angle = 120 + 4 * section_angle;
        indicator_end_angle = 120 + 5 * section_angle;

    }

    // Set the start and end angles of the indicator
    lv_arc_set_start_angle(ui_MainArcMenu, indicator_start_angle);
    lv_arc_set_end_angle(ui_MainArcMenu, indicator_end_angle);

     if(ui_screenselectlabel != NULL) {
        lv_label_set_text(ui_screenselectlabel, label_text);
    } else {
        Serial.println("Error: ui_screenselectlabel is NULL");

    }
    //lv_label_set_text(ui_screenselectlabel, label_text);

}

void mainarc_select(lv_event_t * e)
{
	 // Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcMenu);

    // Determine which screen to switch to based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section (0-100) - Do nothing, already on the main screen
        return;
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section (100-200) - Change to Clock Screen
         lv_arc_set_start_angle(ui_MainArcClockMenu, 180);
         lv_arc_set_end_angle(ui_MainArcClockMenu, 240);
        _ui_screen_change(&ui_ClockScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_ClockScreen_screen_init);
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section (200-300) - Change to Music Controls
        lv_arc_set_start_angle(ui_MainArcMenuMusic, 240);
         lv_arc_set_end_angle(ui_MainArcMenuMusic, 300);
        _ui_screen_change(&ui_MusicControls, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MusicControls_screen_init);
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section (300-400) - Change to Settings
        // lv_arc_set_start_angle(ui_MainArcSettingsMenu, 300);
       //  lv_arc_set_end_angle(ui_MainArcSettingsMenu, 360);
        _ui_screen_change(&ui_Settings, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_Settings_screen_init);
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section (400-500) - Currently unused
        // You can leave this empty or add functionality later
    }
}


void mainarcclock_valuechange(lv_event_t * e)
{
	// Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcClockMenu);

    // Define the total angle the arc covers
    int total_angle = 300;
    
    // Calculate the angle for each section (5 sections)
    int section_angle = total_angle / 5;

    // Define variables for the start and end angles of the indicator
    int indicator_start_angle;
    int indicator_end_angle;

    // Determine the indicator position based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section
        indicator_start_angle = 120;
        indicator_end_angle = 120 + section_angle;
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section
        indicator_start_angle = 120 + section_angle;
        indicator_end_angle = 120 + 2 * section_angle;
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section
        indicator_start_angle = 120 + 2 * section_angle;
        indicator_end_angle = 120 + 3 * section_angle;
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section
        indicator_start_angle = 120 + 3 * section_angle;
        indicator_end_angle = 120 + 4 * section_angle;
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section
        indicator_start_angle = 120 + 4 * section_angle;
        indicator_end_angle = 120 + 5 * section_angle;
    }

    // Set the start and end angles of the indicator
    lv_arc_set_start_angle(ui_MainArcClockMenu, indicator_start_angle);
    lv_arc_set_end_angle(ui_MainArcClockMenu, indicator_end_angle);
}


void mainarcclock_select(lv_event_t * e)
{
	 // Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcClockMenu);

    // Determine which screen to switch to based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        lv_arc_set_start_angle(ui_MainArcMenu, 120);
         lv_arc_set_end_angle(ui_MainArcMenu, 180);
         lv_label_set_text(ui_screenselectlabel, "Main");
        _ui_screen_change(&ui_MainScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MainScreen_screen_init);
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section (100-200) - Change to Clock Screen
        return;
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section (200-300) - Change to Music Controls
        lv_arc_set_start_angle(ui_MainArcMenuMusic, 240);
         lv_arc_set_end_angle(ui_MainArcMenuMusic, 300);
        _ui_screen_change(&ui_MusicControls, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MusicControls_screen_init);
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section (300-400) - Change to Settings
     //    lv_arc_set_start_angle(ui_MainArcSettingsMenu, 300);
     //    lv_arc_set_end_angle(ui_MainArcSettingsMenu, 360);
        _ui_screen_change(&ui_Settings, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_Settings_screen_init);
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section (400-500) - Currently unused
        // You can leave this empty or add functionality later
    }
}

void mainarcmusic_valuechange(lv_event_t * e)
{
	// Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcMenuMusic);

    // Define the total angle the arc covers
    int total_angle = 300;
    
    // Calculate the angle for each section (5 sections)
    int section_angle = total_angle / 5;

    // Define variables for the start and end angles of the indicator
    int indicator_start_angle;
    int indicator_end_angle;

    // Determine the indicator position based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section
        indicator_start_angle = 120;
        indicator_end_angle = 120 + section_angle;
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section
        indicator_start_angle = 120 + section_angle;
        indicator_end_angle = 120 + 2 * section_angle;
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section
        indicator_start_angle = 120 + 2 * section_angle;
        indicator_end_angle = 120 + 3 * section_angle;
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section
        indicator_start_angle = 120 + 3 * section_angle;
        indicator_end_angle = 120 + 4 * section_angle;
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section
        indicator_start_angle = 120 + 4 * section_angle;
        indicator_end_angle = 120 + 5 * section_angle;
    }

    // Set the start and end angles of the indicator
    lv_arc_set_start_angle(ui_MainArcMenuMusic, indicator_start_angle);
    lv_arc_set_end_angle(ui_MainArcMenuMusic, indicator_end_angle);
}


void mainarcmusic_select(lv_event_t * e)
{
	 // Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcMenuMusic);

    // Determine which screen to switch to based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section (0-100) - Do nothing, already on the main screen
         lv_arc_set_start_angle(ui_MainArcMenu, 120);
         lv_arc_set_end_angle(ui_MainArcMenu, 180);
         lv_label_set_text(ui_screenselectlabel, "Main");
         _ui_screen_change(&ui_MainScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MainScreen_screen_init);
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section (100-200) - Change to Clock Screen
         lv_arc_set_start_angle(ui_MainArcClockMenu, 180);
         lv_arc_set_end_angle(ui_MainArcClockMenu, 240);
        _ui_screen_change(&ui_ClockScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_ClockScreen_screen_init);
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section (200-300) - Change to Music Controls
        return;
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section (300-400) - Change to Settings
       // lv_arc_set_start_angle(ui_MainArcSettingsMenu, 300);
       //  lv_arc_set_end_angle(ui_MainArcSettingsMenu, 360);
        _ui_screen_change(&ui_Settings, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_Settings_screen_init);
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section (400-500) - Currently unused
        // You can leave this empty or add functionality later
    }
}

void musictrack_release(lv_event_t * e)
{
	// Your code here
}

void playbutton_pressed(lv_event_t * e)
{
	// Your code here
}

void prevbutton_pressed(lv_event_t * e)
{
	// Your code here
}

void nextbutton_pressed(lv_event_t * e)
{
	// Your code here
}

void mainarcsettings_valuechange(lv_event_t * e)
{
/* 	// Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcSettingsMenu);

    // Define the total angle the arc covers
    int total_angle = 300;
    
    // Calculate the angle for each section (5 sections)
    int section_angle = total_angle / 5;

    // Define variables for the start and end angles of the indicator
    int indicator_start_angle;
    int indicator_end_angle;

    // Determine the indicator position based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section
        indicator_start_angle = 120;
        indicator_end_angle = 120 + section_angle;
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section
        indicator_start_angle = 120 + section_angle;
        indicator_end_angle = 120 + 2 * section_angle;
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section
        indicator_start_angle = 120 + 2 * section_angle;
        indicator_end_angle = 120 + 3 * section_angle;
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section
        indicator_start_angle = 120 + 3 * section_angle;
        indicator_end_angle = 120 + 4 * section_angle;
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section
        indicator_start_angle = 120 + 4 * section_angle;
        indicator_end_angle = 120 + 5 * section_angle;
    }

    // Set the start and end angles of the indicator
    lv_arc_set_start_angle(ui_MainArcSettingsMenu, indicator_start_angle);
    lv_arc_set_end_angle(ui_MainArcSettingsMenu, indicator_end_angle); */
}

void mainarcsettings_select(lv_event_t * e)
{
/* 	 // Get the current value of the arc
    int arcvalue = lv_arc_get_value(ui_MainArcSettingsMenu);

    // Determine which screen to switch to based on the value of the arc
    if(arcvalue >= 0 && arcvalue < 100) {
        // First section (0-100) - Do nothing, already on the main screen
        lv_arc_set_start_angle(ui_MainArcMenu, 120);
         lv_arc_set_end_angle(ui_MainArcMenu, 180);
         lv_label_set_text(ui_screenselectlabel, "Main");
         _ui_screen_change(&ui_MainScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MainScreen_screen_init);
    } else if(arcvalue >= 100 && arcvalue < 200) {
        // Second section (100-200) - Change to Clock Screen
         lv_arc_set_start_angle(ui_MainArcClockMenu, 180);
         lv_arc_set_end_angle(ui_MainArcClockMenu, 240);
        _ui_screen_change(&ui_ClockScreen, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_ClockScreen_screen_init);
    } else if(arcvalue >= 200 && arcvalue < 300) {
        // Third section (200-300) - Change to Music Controls
        lv_arc_set_start_angle(ui_MainArcMenuMusic, 240);
         lv_arc_set_end_angle(ui_MainArcMenuMusic, 300);
        _ui_screen_change(&ui_MusicControls, LV_SCR_LOAD_ANIM_FADE_ON, 100, 0, ui_MusicControls_screen_init);
    } else if(arcvalue >= 300 && arcvalue < 400) {
        // Fourth section (300-400) - Change to Settings
        return;
    } else if(arcvalue >= 400 && arcvalue <= 500) {
        // Fifth section (400-500) - Currently unused
        // You can leave this empty or add functionality later
    } */
}
